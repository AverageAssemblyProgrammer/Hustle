#!/usr/bin/hustle/hustle.py runme
include("all") return

# because we do not have args right now, so we are going to
# get filepath with input instead of argv 

func usage()
    printh("Subcommands are:- ")
    printh("    run    <filepath>                   - run the file")
    printh("    #!(fullpath_to_code_runner) runme   - will run itself, so you can make the file a exe")
    printh("    help                                - will print this help screen without the non zero exit")      
end 

func throw_error(error, error_code, arg)
    printh("ERROR:- " + str(error) + ": " + str(arg))
    usage()
    exit(error_code)
end 

func check_subcommand(c)
	if str(c) == "run " then
		#run(filepath)
		var res = "run"
		return res
	elif str(c) == "run" then
		var res = "run"
		return res
	elif str(c) == "r " then
		var res = "run"
		return res
	elif str(c) == "r" then
		var res = "run"
		return res
	elif str(c) == "-r" then
		var res = "run"
		return res
	elif str(c) == "-r " then
		var res = "run"
		return res
	elif str(c) == "help" then
		var res = "help"
		return res
	elif str(c) == "help " then
		var res = "help"
		return res
	elif str(c) == "h" then
		var res = "help"
		return res
	elif str(c) == "-h" then
		var res = "help"
		return res
	elif str(c) == "h " then
		var res = "help"
		return res
	elif str(c) == "-h " then
		var res = "help"
		return res
	elif str(c) == "runme" then
		var res = "runme"
		return res
	elif str(c) == "runme " then
		var res = "runme"
		return res
	else
		throw_error("Unknown Subcommand", 1, c)
		usage()
		exit(1)
    end 
end 

func out_run()
	var subcommand = argv(1)
	var struct = check_subcommand(subcommand)
	if struct == "run" then
		var filepath = argv(2)
		run(str(filepath))
	elif struct == "runme" then
		var filepath = argv(2)
		run(str(filepath))
	elif struct == "help" then
		usage()
		exit(0)
	end 
end

out_run()
